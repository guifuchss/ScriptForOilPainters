import tkinter as tk
from tkinter import messagebox, colorchooser, filedialog
import numpy as np
from colour import SpectralDistribution, XYZ_to_sRGB, sd_to_XYZ
from PIL import Image, ImageTk, ImageOps
import os

class PaintMixingGame:
    def __init__(self, master):
        self.master = master
        master.title("Jogo de Mistura de Tintas a Óleo")

        # Carregar a textura de tinta padrão
        texture_path = r"E:\PythonCodes\Projetos\ScriptForOilPainters\texture_oil\pngtree-textured-background-with-brush-stroke-of-gray-oil-paint-image_13659816.png"
        try:
            if not os.path.exists(texture_path):
                raise FileNotFoundError("A imagem de textura não foi encontrada no caminho especificado.")
            self.texture_image = Image.open(texture_path).convert('RGBA')
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao carregar a imagem de textura:\n{e}")
            self.texture_image = None  # Defina como None ou uma imagem padrão

        self.texture_photo = None  # Para manter a referência da imagem
        self.saved_tones = []  # Armazena os tons criados

        # Dados espectrais aproximados para as tintas
        self.available_paints_spectral = {
            'Amarelo Ocre': self.create_spectral_distribution('Amarelo Ocre'),
            'Vermelho Cádmio': self.create_spectral_distribution('Vermelho Cádmio'),
            'Azul Ultramarino': self.create_spectral_distribution('Azul Ultramarino'),
            'Branco de Titânio': self.create_spectral_distribution('Branco de Titânio'),
            'Preto Marfim': self.create_spectral_distribution('Preto Marfim'),
            'Verde Viridian': self.create_spectral_distribution('Verde Viridian'),
            'Siena Queimada': self.create_spectral_distribution('Siena Queimada'),
            'Alizarin Crimson': self.create_spectral_distribution('Alizarin Crimson'),
            'Amarelo Limão': self.create_spectral_distribution('Amarelo Limão'),
            'Siena Natural': self.create_spectral_distribution('Siena Natural'),
            'Terra de Sombra Queimada': self.create_spectral_distribution('Terra de Sombra Queimada'),
            'Azul Cobalto': self.create_spectral_distribution('Azul Cobalto'),
            'Azul Cerúleo': self.create_spectral_distribution('Azul Cerúleo'),
            'Amarelo Cádmio': self.create_spectral_distribution('Amarelo Cádmio'),
            'Cinza de Payne': self.create_spectral_distribution('Cinza de Payne'),
            'Verde Ftalocianina': self.create_spectral_distribution('Verde Ftalocianina'),
            'Azul Ftalocianina': self.create_spectral_distribution('Azul Ftalocianina'),
            'Magenta Quinacridona': self.create_spectral_distribution('Magenta Quinacridona'),
            'Amarelo Nápoles': self.create_spectral_distribution('Amarelo Nápoles'),
            'Vermelho Índio': self.create_spectral_distribution('Vermelho Índio'),
        }

        self.selected_paints = {}
        self.mistura = []  # Armazena tuplas (sd, quantidade)

        self.background_color = None
        self.background_image = None
        self.bg_image_label = None

        self.create_selection_interface()

    def create_spectral_distribution(self, paint_name):
        wavelengths = np.arange(380, 781, 5)

        if paint_name == 'Amarelo Ocre':
            values = np.exp(-0.001 * (wavelengths - 580) ** 2)
        elif paint_name == 'Vermelho Cádmio':
            values = np.exp(-0.001 * (wavelengths - 610) ** 2)
        elif paint_name == 'Azul Ultramarino':
            values = np.exp(-0.001 * (wavelengths - 450) ** 2)
        elif paint_name == 'Branco de Titânio':
            values = np.ones_like(wavelengths)
        elif paint_name == 'Preto Marfim':
            values = np.zeros_like(wavelengths)
        elif paint_name == 'Verde Viridian':
            values = np.exp(-0.001 * (wavelengths - 530) ** 2)
        elif paint_name == 'Siena Queimada':
            values = np.exp(-0.001 * (wavelengths - 600) ** 2) * 0.8  # Ajustando para mais visibilidade
        elif paint_name == 'Alizarin Crimson':
            values = np.exp(-0.001 * (wavelengths - 640) ** 2)
        elif paint_name == 'Amarelo Limão':
            values = np.exp(-0.001 * (wavelengths - 570) ** 2)
        elif paint_name == 'Siena Natural':
            values = np.exp(-0.001 * (wavelengths - 580) ** 2) * 0.85  # Ajuste para visibilidade
        elif paint_name == 'Terra de Sombra Queimada':
            values = np.exp(-0.001 * (wavelengths - 600) ** 2) * 0.75  # Ajuste para mais visibilidade
        elif paint_name == 'Azul Cobalto':
            values = np.exp(-0.001 * (wavelengths - 480) ** 2)
        elif paint_name == 'Azul Cerúleo':
            values = np.exp(-0.001 * (wavelengths - 500) ** 2)
        elif paint_name == 'Amarelo Cádmio':
            values = np.exp(-0.001 * (wavelengths - 580) ** 2)
        elif paint_name == 'Cinza de Payne':
            values = np.ones_like(wavelengths) * 0.6  # Ajuste para maior contraste
        elif paint_name == 'Verde Ftalocianina':
            values = np.exp(-0.001 * (wavelengths - 520) ** 2)
        elif paint_name == 'Azul Ftalocianina':
            values = np.exp(-0.001 * (wavelengths - 460) ** 2)
        elif paint_name == 'Magenta Quinacridona':
            values = np.exp(-0.001 * (wavelengths - 610) ** 2)
        elif paint_name == 'Amarelo Nápoles':
            values = np.exp(-0.001 * (wavelengths - 580) ** 2) * 0.9
        elif paint_name == 'Vermelho Índio':
            values = np.exp(-0.001 * (wavelengths - 620) ** 2)
        else:
            values = np.ones_like(wavelengths) * 0.5

        sd = SpectralDistribution(values, wavelengths)
        return sd

    def create_selection_interface(self):
        self.clear_window()

        tk.Label(self.master, text="Selecione as tintas para sua paleta:").pack()

        self.paint_vars = {}
        for paint in self.available_paints_spectral.keys():
            var = tk.IntVar()
            cb = tk.Checkbutton(self.master, text=paint, variable=var)
            cb.pack(anchor='w')
            self.paint_vars[paint] = var

        self.add_paint_button = tk.Button(self.master, text="Adicionar Nova Tinta", command=self.add_new_paint)
        self.add_paint_button.pack()

        self.create_palette_button = tk.Button(self.master, text="Criar Paleta", command=self.create_palette)
        self.create_palette_button.pack()

    def add_new_paint(self):
        messagebox.showinfo("Aviso", "A adição de novas tintas não é suportada nesta versão.")

    def create_palette(self):
        self.selected_paints = {paint: sd for paint, var in self.paint_vars.items() if var.get() == 1 for sd in [self.available_paints_spectral[paint]]}
        if not self.selected_paints:
            messagebox.showwarning("Aviso", "Nenhuma tinta selecionada!")
            return
        self.mistura = []
        self.create_palette_interface()

    def create_palette_interface(self):
        self.clear_window()

        # Configurar a janela para tela cheia
        self.master.attributes('-fullscreen', True)

        if self.background_color:
            self.master.config(bg=self.background_color)

        palette_frame = tk.Frame(self.master)
        palette_frame.pack()

        mistura_frame = tk.Frame(self.master)
        mistura_frame.pack(pady=20)

        # Mostrar os controles de quantidade para cada tinta adicionada
        for paint in self.selected_paints.keys():
            paint_frame = tk.Frame(palette_frame)
            paint_frame.pack(side='left', padx=20, pady=20)

            # Aumentar a área de visualização da tinta
            rgb = self.sd_to_rgb(self.selected_paints[paint])
            paint_texture_photo = self.get_colored_texture(rgb)

            color_label = tk.Label(paint_frame, image=paint_texture_photo)
            color_label.pack()

            color_label.image = paint_texture_photo

            # Exibir o nome da tinta
            tk.Label(paint_frame, text=paint, font=("Helvetica", 16)).pack()

            # Controle de quantidade de tinta para cada cor
            quantity_var = tk.DoubleVar(value=1.0)
            tk.Label(paint_frame, text=f"Quantidade de {paint}:").pack()
            quantity_scale = tk.Scale(paint_frame, from_=0.25, to=1.0, resolution=0.25, orient='horizontal', variable=quantity_var)
            quantity_scale.pack()

            add_button = tk.Button(paint_frame, text="+", command=lambda p=paint, q=quantity_var: self.add_to_mistura(p, q.get()))
            add_button.pack()

        tk.Label(mistura_frame, text="Mistura Central:").pack()

        self.mistura_image_label = tk.Label(mistura_frame)
        self.mistura_image_label.pack()

        self.info_label = tk.Label(self.master, text="")
        self.info_label.pack(pady=10)

        self.color_info_label = tk.Label(self.master, text="RGB: (255, 255, 255)")
        self.color_info_label.pack()

        # Botão de "Refresh" para resetar a mistura
        refresh_button = tk.Button(self.master, text="Refresh", command=self.reset_mistura, font=("Helvetica", 14))
        refresh_button.pack(pady=10)

        # Botão "Salvar Tom" para salvar o tom criado
        save_tone_button = tk.Button(self.master, text="Salvar Tom", command=self.save_tone, font=("Helvetica", 14))
        save_tone_button.pack(pady=10)

        # Área para exibir os tons salvos
        self.saved_tones_frame = tk.Frame(self.master)
        self.saved_tones_frame.pack(pady=10)

    def reset_mistura(self):
        self.mistura = []
        self.mistura_image_label.config(image='')  # Resetar a imagem da mistura
        self.color_info_label.config(text="RGB: (255, 255, 255)")  # Resetar o texto RGB
        self.info_label.config(text="Mistura resetada.")

    def save_tone(self):
        if not self.mistura:
            messagebox.showwarning("Aviso", "Nenhuma mistura criada para salvar!")
            return

        # Salvar o tom criado
        mistura_sd = self.calculate_mistura_spectral()
        rgb = self.sd_to_rgb(mistura_sd)
        self.saved_tones.append(rgb)

        # Exibir o tom salvo na interface
        self.display_saved_tones()

    def display_saved_tones(self):
        # Limpar os tons salvos anteriores
        for widget in self.saved_tones_frame.winfo_children():
            widget.destroy()

        # Exibir cada tom salvo
        for i, rgb in enumerate(self.saved_tones):
            saved_color = Image.new('RGB', (50, 50), rgb)
            saved_photo = ImageTk.PhotoImage(saved_color)
            label = tk.Label(self.saved_tones_frame, image=saved_photo)
            label.image = saved_photo
            label.grid(row=0, column=i, padx=10)

    def get_colored_texture(self, rgb):
        if self.texture_image is None:
            color_image = Image.new('RGB', (100, 100), rgb)
            return ImageTk.PhotoImage(color_image)

        grayscale_texture = self.texture_image.convert('L')
        rgb_hex = '#%02x%02x%02x' % rgb
        colored_texture = ImageOps.colorize(grayscale_texture, black="black", white=rgb_hex)
        colored_texture = colored_texture.resize((100, 100), Image.LANCZOS)  # Aumentar o tamanho da textura
        return ImageTk.PhotoImage(colored_texture)

    def add_to_mistura(self, paint, intensity):
        sd = self.selected_paints[paint]
        self.mistura.append((sd, intensity))
        mistura_sd = self.calculate_mistura_spectral()
        rgb = self.sd_to_rgb(mistura_sd)
        rgb_text = f"RGB: {rgb}"
        self.info_label.config(text=f"Foi adicionada a tinta {paint} com quantidade {int(intensity * 100)}%")
        self.color_info_label.config(text=rgb_text)

        self.apply_color_to_texture(rgb)

    def calculate_mistura_spectral(self):
        if not self.mistura:
            return SpectralDistribution(np.ones(81), np.arange(380, 781, 5))

        epsilon = 1e-6
        absorbances = []
        weights = []
        for sd, intensity in self.mistura:
            absorbance = -np.log10(sd.values + epsilon)
            absorbances.append(absorbance)
            weights.append(intensity)

        weights = np.array(weights)
        weights /= np.sum(weights)

        avg_absorbance = np.average(absorbances, axis=0, weights=weights)
        mistura_reflectance = 10 ** (-avg_absorbance)

        mistura_sd = SpectralDistribution(mistura_reflectance, self.mistura[0][0].domain)
        return mistura_sd

    def sd_to_rgb(self, sd):
        xyz = sd_to_XYZ(sd)
        rgb = XYZ_to_sRGB(xyz / 100)
        rgb = np.clip(rgb, 0, 1) * 255
        return tuple(rgb.astype(int))

    def apply_color_to_texture(self, rgb):
        if self.texture_image is None:
            color_image = Image.new('RGB', (200, 200), rgb)
            self.texture_photo = ImageTk.PhotoImage(color_image)
        else:
            grayscale_texture = self.texture_image.convert('L')
            rgb_hex = '#%02x%02x%02x' % rgb
            colored_texture = ImageOps.colorize(grayscale_texture, black="black", white=rgb_hex)
            colored_texture = colored_texture.resize((200, 200), Image.LANCZOS)
            self.texture_photo = ImageTk.PhotoImage(colored_texture)

        self.mistura_image_label.config(image=self.texture_photo)
        self.mistura_image_label.image = self.texture_photo

    def clear_window(self):
        for widget in self.master.winfo_children():
            widget.destroy()
        if self.bg_image_label:
            self.bg_image_label.destroy()
            self.bg_image_label = None

    def start(self):
        self.master.mainloop()

root = tk.Tk()
game = PaintMixingGame(root)
game.start()
